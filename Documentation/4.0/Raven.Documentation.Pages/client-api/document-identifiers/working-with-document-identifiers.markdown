# Working with Document Identifiers

Each document in a RavenDB database has a unique string associated with its document called an identifier. Every entity that you store either by using [a session](../session/what-is-a-session-and-how-does-it-work) or with a [put document command](../commands/documents/put) will have such identifier assigned in the database. In RavenDB there are [four options](../../server/kb/document-identifier-generation) supported by the server to store a document and assign an identifier to it.
The client can directly take advantage of them. You can always handle the identifier generation using the knowledge of the type of the entity and the identifier number provided by the HiLo algorithm. This is how the identifier is generated by the session, which is described in details below.

## Session Usage

If you choose to use the session, you don't have to pay any special attention to the identifiers of the stored entities. The session will take care of it by generating the identifiers automatically.

It utilizes [conventions](../../client-api/configuration/conventions/what-are-conventions) and HiLo algorithms to produce the identifiers. Everything is handled by the session's mechanism and is transparent for the user. 
However, you can influence the identifier generation strategy by overwriting [the identifier generation conventions](../../client-api/configuration/conventions/identifier-generation/global). 

In this article we are going to consider the behavior in accordance with the default conventions.

{INFO:Identifiers in RavenDB are strings}
Identifiers of documents in RavenDB database are always strings, so take this into consideration when you model your entities.
{INFO/}


### Autogenerated IDs

In order to figure out which property (or field) holds the entity's identifier, the convention `Conventions.FindIdentityProperty` is called. 
By default, it looks for the property or the field named `Id` (case sensitive). However, this property can have a `null` value or even not be present at all. Then the automatic identifier generation strategy is performed. The default convention is that entities get the identifiers in the following format `collection/number-tag`. 
RavenDB client first determines the name of [the collection](../../client-api/faq/what-is-a-collection) that the entity belongs to, then contacts the server in order to retrieve a numeric range of values. These values can be used as the `number` part.
The range of available numbers is calculated by using the `HiLo` algorithm and it is tracked per collection. The current maximum value in ranges are stored in documents `Raven/Hilo/collection`.

Let's see the example.

{CODE session_id_not_provided@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

What will be the identifier of this order? You can check it by calling:

{CODE session_get_document_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

If this is the first `Order` entity in your database, then it will return `orders/1-A`. How does the identifier generation process proceed? The RavenDB client determines the collection name as `orders` (by default it is the plural form of the entity name).
Then it asks the server to give him the ID's range he can use (the first available range is 1 - 32). The server will handle the Raven/Hilo/orders document. 
The next available identifier value (always incrementing number) from the given range is `1` so its combination with the collection name and the node tag gives the result `orders/1-A`.

The next attempt to store another `Order` object within the same session will result in creating the `orders/2-A` identifier. However, this time asking the server about the possible range will not be necessary because the in-memory range (1 - 32) is enough, so simply the next number will be added as the identifier suffix.

{INFO:identifier value numeric range generation}

Each (in code) document store _instance_ handles the generation of the identifier value numeric range. The database stores the last requested number while the document store _instances_ request ranges and caches the returned range of available identities.

The database has a single document (per collection) which stores the last identifier value requested by a document store instance.

Eg. the document `Raven/HiLo/accounts` has the following value `
{ 
    "Max": "4000",
    "@metadata": {
        "@collection": "@hilo"
    } 
}`, then the next range will be `4001 - 4032`, if 32 was range size. 
(By default, it's 32).

The number of sessions per document store instance plays no part in identifier value generation. When the store is disposed, the client sends to the server the last value that he used and the max value he got from the server. Then the server will write it in the HiLo document (If the Max number is equal to the max number from the client and bigger or equal to the last used value by the client)
{INFO/}

If your intention is to skip the identifier creation strategy that relies on the collection and HiLo value pair, then you can allow the RavenDB database to assign the Guid identifier to the stored document. Then you have to provide the `string.Empty` as the value of the `Id` property:

{CODE session_empty_string_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

This time the check for the document ID is called after `SaveChanges` because only then we go to the server while the entity's identifier is generated there.

### Custom / Semantic IDs

The session also supports the option to store the entity and explicitly tell under what identifier it should be stored in the database. To do this, you can either set the `Id` property of the object:

{CODE session_semantic_id_1@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

or use the following `Store` method overload:

{CODE session_semantic_id_2@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

### Automatic IDs and Identities

RavenDB also supports the notion of the identifier without the usage of the HiLo. By creating a string ID property in your entity and setting it to a value ending with a slash (`/`) or with a pipe (`|`), you can ask RavenDB to assign a document ID to a new document when it is saved.

{CODE session_auto_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}
 
Using `/` at the end of the ID will create an ID at the server side by using the etag of the document storage.
After executing the code above we will get from the server ID something that looks like this `companies/000000000000000027-A`.
Be aware that the only guarantee for the auto IDs is that it will always increase in the same node.

Using `|` at the end of the ID is the same as putting `/`. In this case we are going to tell RavenDB to create the ID when the document is saved. But here we are going to use a special cluster identity integer that will increase every time we are using the pipe symbol as a suffix to our ID.

{CODE session_identity_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

After execution of the code above the ID will be `companies/1`. Here we don't add the tag of the node to the end of the ID because this number is unique to all the cluster.
Identities are sequential, so running the above code again will generate `companies/2`, and so on.

{NOTE Using the pipe symbol (`|`) as a prefix to the ID generates a call to the cluster and **might** affect performance /}

{INFO:Prefix convention}
Note that we used `companies/` as the prefix just to follow the RavenDB convention. But nothing stands in your way to provide a different prefix which will be completely unrelated to the collection name.
{INFO/}

{INFO:Concurrent writes}
The identities are generated and updated on the server side in the atomic fashion. This means you can safely use this approach in the concurrent writes scenario.
{INFO/}

## Commands Usage

The use of the commands API gives you the full freedom to select the identifier generation strategy. As in the case of session, you can either ask the server to provide the identifier, or provide the identifier of the stored entity manually.

### Identity IDs

As in the case of session, you can indicate if the identifier that you are passing needs to have the identifier suffix added. You have to mark it by ending the ID with `/` or `|` character:

{CODE commands_identity@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

Using the commands, you can manage to build identifiers on the client, but still relying on the server side identifier generator. Simply point out for which prefix you want to fetch the next available identifier number. Look at the example:

{CODE commands_identity_generate@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

Note that such construction requires going to the server twice in order to add a single document. The call of `session.Advanced.RequestExecutor.Execute(command, session.Advanced.Context)` is necessary for every entity you want to store. Asking the server about the next identifier results in increasing this value on the server side. You cannot simply get the next available identifier and 
use it to create the identifiers for the whole collection of the same type objects by locally incrementing this value because you can accidentally overwrite the document or get a conflict exception if someone else is putting documents using the identifier mechanism.

There are dedicated commands that allow you to set identifier values for a single given prefix:

{CODE commands_identity_set@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

using System.Collections.Generic;
using System.Linq;
using Raven.Abstractions.Data;

namespace Raven.Documentation.Samples.ClientApi.DocumentIdentifiers
{
	using Client.Document;
	using CodeSamples.Orders;
	using Json.Linq;

	public class WorkingWithDocumentIds
	{
		public WorkingWithDocumentIds()
		{
			var store = new DocumentStore();

			var session = store.OpenSession();

			#region session_id_not_provided
			Order order = new Order
			{
				Id = null // value not provided
			};

			session.Store(order);
			#endregion


			#region session_get_document_id
			string orderId = session.Advanced.GetDocumentId(order); // "orders/1"
			#endregion

			#region session_empty_string_id
			Order orderEmptyId = new Order
			{
				Id = string.Empty // database will create a GUID value for it
			};

			session.Store(orderEmptyId);

			session.SaveChanges();

			string guidId = session.Advanced.GetDocumentId(orderEmptyId); // "6778c231-180b-4715-aad4-253c4c6027a4"
			#endregion

			#region session_semantic_id_1
			Product product = new Product
			{
				Id = "products/ravendb",
				Name = "RavenDB"
			};

			session.Store(product);
			#endregion

			#region session_semantic_id_2
			session.Store(new Product() { Name = "RavenDB" }, "products/ravendb");
			#endregion


			#region session_identity_id
			session.Store(new Company()
			{
				Id = "companies/"
			});

			session.Store(new Company()
			{
				Id = "companies/"
			});

			session.SaveChanges();
			#endregion

			#region commands_autogenerated_guid
			PutResult result = store.DatabaseCommands.Put(null, null, new RavenJObject(){ {"Name", "RavenDB"}}, new RavenJObject());

			string key = result.Key; // "9ce12df5-1027-4704-b2cf-d312e9ea0e59"
			#endregion


			#region commands_identity
			result = store
				.DatabaseCommands
				.Put(
					"products/",
					null,
					new RavenJObject { { "Name", "RavenDB" } },
					new RavenJObject());

			string identityKey = result.Key; // "products/1"
			#endregion

			#region commands_identity_generate
			long identity = store.DatabaseCommands.NextIdentityFor("products");

			result = store
				.DatabaseCommands
				.Put(
					"products/" + identity,
					null,
					new RavenJObject { { "Name", "RavenDB" } },
					new RavenJObject());

			#endregion

			#region commands_identity_set
			store.DatabaseCommands.SeedIdentityFor("products", 42);
            #endregion

            #region commands_identities_set
            store.DatabaseCommands.SeedIdentities(new Dictionary<string, long>
            {
                { "products", 42 },
                { "orders", 11 }
            }.ToList());
            #endregion
        }
    }
}

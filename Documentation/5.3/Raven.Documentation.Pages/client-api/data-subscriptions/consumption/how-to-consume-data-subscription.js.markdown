# Data Subscriptions: How to Consume a Data Subscription

---

{NOTE: }

* Batches of documents sent from a Subscription Task defined on the server are 
  consumed and processed by a subscription worker client.  
* The `SubscripionWorker` object, which is defined on the client, manages the 
  communication between the server and the client and processes the documents 
  batches sent from the server.  
* There are several ways to create and configure the SubscriptionWorker - 
  see `SubscriptionWorkerOptions`.  

* In this page:
  * [SubscriptionWorker lifecycle](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#subscriptionworker-lifecycle)  
  * [Error handling](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#error-handling)  
  * [Worker interplay](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#workers-interplay)  
     * [Available Worker Strategies](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#available-worker-strategies)  
  * [Determining Which Workers a Subscription Will Serve](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#determining-which-workers-a-subscription-will-serve)  

{NOTE/}

---

{PANEL:SubscriptionWorker lifecycle}
A `SubscriptionWorker` object starts its life from being generated by the `DocumentsStore.subscriptions`:

{CODE:nodejs subscription_open_simple@client-api\dataSubscriptions\dataSubscriptions.js /}

The worker is going to connect to the server asynchronously, when a listener for the `"batch"` event is registered using `on()` method. 

{CODE:nodejs subscription_run_simple@client-api\dataSubscriptions\dataSubscriptions.js /}

From this point on, the subscription worker will start processing batches. If for any reason, the processing is aborted an `"error"` is going to be emitted with an `Error` argument.

{PANEL/}


{PANEL:Error handling}
There are two categories of errors that may occur during subscription processing:

{INFO:Internal mechanism errors}
Those errors occur during the normal server-client communication between the worker and the server (those would not be emitted via `"error"` event).  
If an unexpected error occurs, the worker will try to reconnect to the server. There are conditions in which the worker will cease its operation and will not try to reconnect:  

* The subscription does not exist or was deleted  

* Another worker took over the subscription (see connection strategy)

* The worker could not connect to any of the servers

* The worker could not receive the node in charge of the task (this can happen when there is no leader)

* Authorization exception

* Exception during connection establishment

{INFO/}

{INFO:User's batch processing logic unhandled exception}
Example:
{CODE:nodejs throw_during_user_logic@client-api\dataSubscriptions\dataSubscriptions.js /}

If an exception is thrown, the worker will abort the current batch process. 
A worker can be configured to treat the thrown exception by either of the following two ways:  

* By default, the worker will wrap the thrown exception with a `SubscriberErrorException` exception and rethrow it,  
  terminating the subscription execution without acknowledging progress or retrying. An `"error"` is going to be emitted.

* If `SubscriptionWorkerOptions`'s value `ignoreSubscriberErrors` is set to true, the erroneous batch will get acknowledged without retrying and the next batches will continue processing. 
{INFO/}

{INFO: Reconnecting}
In the cases above, we described situations in which a worker will try to reconnect with the server. There are two key `SubscriptionWorkerOptions` fields controlling this state:

* `timeToWaitBeforeConnectionRetry` - The time that the worker will 'sleep' before trying to reconnect.

* `maxErroneousPeriod` - The maximum time in which the worker is allowed to be in erroneous state. After that time passes, the worker will stop trying to reconnect
{INFO/}

{INFO: OnUnexpectedSubscriptionError}
`OnUnexpectedSubscriptionError` is the event raised when a connection failure occurs 
between the subscription worker and the server and it throws an unexpected exception. 
When this occurs, the worker will automatically try to reconnect again. This event is 
useful for logging these unexpected exceptions.
{INFO/}

{PANEL/}

{PANEL: Workers interplay}
* Subscription workers are configured with a **strategy**, that determines whether 
  they can connect their subscription **concurrently**, or only one at a time.  
* If a one-at-a-time strategy is chosen, it also determines how the workers 
  interact with each other to resolve which will connect the subscription.  

{NOTE: }

The strategy is configured by the `SubscriptionWorkerOptions` `Strategy` field.  
The strategy field is the enum `SubscriptionOpeningStrategy`.  

| `SubscriptionOpeningStrategy` | |
| ------------- | ------------- |
| `OpenIfFree` | Connect if no other worker is connected |
| `WaitForFree` | Wait for currently connected worker to disconnect |
| `TakeOver` | Take over the connection |
| `Concurrent` | Connect concurrently |

{NOTE/}

## Available Worker Strategies

---

### One Worker Per Subscription Strategies 

The following three strategies allow only a **single worker to connect 
the subscription at any given time**, and determine what happens when one 
worker is connected and another tries to connect.  

* `SubscriptionOpeningStrategy.OpenIfFree`  
  The server will allow the worker to connect only if there is currently 
  no other connected worker.  
  If there is an existing connection, the incoming worker will throw a 
  `SubscriptionInUseException`.  
* `SubscriptionOpeningStrategy.WaitForFree`  
  If the worker currently cannot open the subscription because it is used 
  by another worker, it will wait for the previous worker to disconnect and 
  connect only then.  
  This is useful in worker failover scenarios, where there is one active 
  worker and another already waits to take its place.  
* `SubscriptionOpeningStrategy.TakeOver`  
  The server will allow an incoming connection to overthrow an existing one, 
  according to the existing connection strategy.  
   * If the existing connection **does not** have a `TakeOver` strategy:  
     The incoming connection will take over, causing the existing 
     connection to throw a `SubscriptionInUseException`.  
   * If the existing connection **has** a `TakeOver` strategy:  
     The incoming connection will throw a `SubscriptionInUseException` exception.  

---

### Concurrent Strategy 

* `SubscriptionOpeningStrategy.Concurrent`  
  Multiple workers of the same subscription are allowed to connect it simultaneously.  
  Read more about concurrent subscriptions [here](../../../client-api/data-subscriptions/concurrent-subscriptions).  

{PANEL/}

{PANEL: Determining Which Workers a Subscription Will Serve}

* Each data subscription serves **either** -  
   1. Workers that use a [One Worker Per Subscription](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#one-worker-per-subscription-strategies) 
      strategy  
  -**or**-  
   2. Workers that use the [Concurrent](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#concurrent-strategy) 
      strategy.  
* After a subscription is created, **the strategy used by the first worker 
  to connect it** will determine which workers this subscription will be able 
  to serve until the end of its lifespan.  
* If a worker that uses the `OpenIfFree`, `WaitForFree`, or `TakeOver` 
  strategy is the first to connect a subscription, the subscription 
  will server from now on only workers that use these strategies.  
   * The subscription will be available for workers that use any 
     of these three strategies (`OpenIfFree`, `WaitForFree`, or `TakeOver`).  
   * If a worker that uses the [Concurrent](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#concurrent-strategy) 
     strategy attempts to connect this subscription -  
     The connection attempt will be rejected.  
     `SubscriptionClosedException` will be thrown.  
* If a worker that uses the `Concurrent` strategy is the first to connect 
  a subscription, the subscription will serve from now on only workers that 
  use the `Concurrent` strategy.  
   * If a worker that uses a [One Worker Per Subscription](../../../client-api/data-subscriptions/consumption/how-to-consume-data-subscription#one-worker-per-subscription-strategies) 
     strategy attempts to connect this subscription -  
     The connection attempt will be rejected.  
     `SubscriptionInUseException` will be thrown.  

{PANEL/}

## Related Articles

### Data Subscriptions  

- [What are Data Subscriptions](../../../client-api/data-subscriptions/what-are-data-subscriptions)  
- [How to Create a Data Subscription](../../../client-api/data-subscriptions/creation/how-to-create-data-subscription)  

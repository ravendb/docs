# Working with Document Identifiers
---

{NOTE: }

* Each document in a RavenDB database has a unique string associated with it, called an **identifier**.  
  Every entity that you store, using either a [session](../session/what-is-a-session-and-how-does-it-work) 
  or a [put document command](../commands/documents/put), is assigned such an identifier.  

* RavenDB supports [several options](../../server/kb/document-identifier-generation) of storing a document and assigning 
  it an identifier.  
  The client can directly utilize these options.  
  
* You can always handle the identifier generation using your knowledge of the entity type and the identifier number provided 
  by the HiLo algorithm. As described below, this is how the identifier is generated by the session.  

* In this page:  
  * [Session Usage](../../client-api/document-identifiers/working-with-document-identifiers#session-usage)  
  * [Autogenerated IDs](../../client-api/document-identifiers/working-with-document-identifiers#autogenerated-ids)  
  * [Custom / Semantic IDs](../../client-api/document-identifiers/working-with-document-identifiers#custom-/-semantic-ids)  
  * [Server-side generated IDs](../../client-api/document-identifiers/working-with-document-identifiers#server-side-generated-ids)  
  * [Identities](../../client-api/document-identifiers/working-with-document-identifiers#identities)  
  * [Setting Identity IDs Using Commands and Operations](../../client-api/document-identifiers/working-with-document-identifiers#setting-identity-ids-using-commands-and-operations)  
     * [Using Commands](../../client-api/document-identifiers/working-with-document-identifiers#using-commands)  
     * [Using Operations](../../client-api/document-identifiers/working-with-document-identifiers#using-operations)  

{NOTE/}

---

{PANEL: Session Usage}

If you choose to use the session, you don't have to pay any special attention to the identifiers of the stored entities. 
The session will take care of it by generating the identifiers automatically.

It utilizes [conventions](../../client-api/configuration/conventions) and HiLo algorithms to produce the identifiers. 
Everything is handled by the session's mechanism and is transparent for the user. 
However, you can influence the identifier generation strategy by overwriting 
[the identifier generation conventions](../../client-api/configuration/identifier-generation/global). 

In this article we are going to consider the behavior in accordance with the default conventions.

{INFO:Identifiers in RavenDB are strings}
Identifiers of documents in RavenDB database are always strings, so take this into consideration when you model your entities.
{INFO/}

{PANEL/}

{PANEL: Autogenerated IDs}

To figure out which property (or field) holds the entity's identifier, the convention `Conventions.
FindIdentityProperty` is called. 
By default, it looks for the property or the field named `Id` (case sensitive). However, this property can 
have a `null` value or even not be present at all. Then the automatic identifier generation strategy is performed. 
The default convention is that entities get the identifiers in the following format `collection/number-tag`. 
RavenDB client first determines the name of [the collection](../../client-api/faq/what-is-a-collection) that 
the entity belongs to, then contacts the server to retrieve a numeric range of values. These values 
can be used as the `number` part.
The range of available numbers is calculated by using the `HiLo` algorithm and is tracked per collection. 
The current maximum value in ranges is stored in documents `Raven/Hilo/collection`.

Let's see the example.

{CODE session_id_not_provided@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

What will be the identifier of this order? You can check it by calling:

{CODE session_get_document_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

If this is the first `Order` entity in your database, then it will return `orders/1-A`. How does the identifier 
generation process proceed? The RavenDB client determines the collection name as `orders` 
(by default it is the plural form of the entity name).
Then it asks the server to give him the ID's range he can use (the first available range is 1 - 32). The server will 
handle the Raven/Hilo/orders document. 
The next available identifier value (always incrementing number) from the given range is `1` so its combination with 
the collection name and the node tag gives the result `orders/1-A`.

The next attempt to store another `Order` object within the same session will result in creating the `orders/2-A` 
identifier. However, this time asking the server about the possible range will not be necessary because the in-memory range 
(1 - 32) is enough, so simply the next number will be added as the identifier suffix.

{INFO:Identifier value numeric range generation}

Each (in code) document store _instance_ handles the generation of the identifier value numeric range. The database 
stores the last requested number while the document store _instances_ request ranges and caches the returned range of 
available identities.

The database has a single document (per collection) which stores the last identifier value requested by a document 
store instance.

E.g. the document `Raven/HiLo/accounts` has the following value 
{CODE-BLOCK:json}
{ 
    "Max": "4000",
    "@metadata": {
        "@collection": "@hilo"
    } 
}
{CODE-BLOCK/}

then the next range will be `4001 - 4032`, if 32 was range size (by default, it's 32).

The number of sessions per document store instance plays no part in identifiers value generation. When the store is 
disposed of, the client sends the server the last value it used and the max value it got from the server. 
Then the server will write it in the HiLo document (If the Max number is equal to the max number from the client 
and bigger or equal to the last used value by the client)
{INFO/}

If you intend to skip the identifier creation strategy that relies on the collection and HiLo value pair, 
you can allow RavenDB to assign the Guid identifier to the stored document. Then, you have to provide the 
`string.Empty` as the value of the `Id` property:

{CODE session_empty_string_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

This time the check for the document ID is called after `SaveChanges` because only then we go to the server while 
the entity's identifier is generated there.

{PANEL/}

{PANEL: Custom / Semantic IDs}

The session also supports the option to store the entity and explicitly tell under what identifier it should be stored 
in the database. To do this, you can either set the `Id` property of the object:

{CODE session_semantic_id_1@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

or use the following `Store` method overload:

{CODE session_semantic_id_2@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

{PANEL/}

{PANEL: Server-side generated IDs}

RavenDB also supports the notion of the identifier without the usage of the HiLo. By creating a string ID property 
in your entity and setting it to a value ending with a slash (`/`), you can ask RavenDB to assign a document ID to 
a new document when it is saved.

{CODE session_auto_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}
 
Using `/` at the end of the ID will create an ID at the server-side by appending a numeric value and the node tag.
After executing the code above we will get from the server ID something that looks like `companies/000000000000000027-A`.

{INFO Be aware that the only guarantee for the numeric part is that it will always be increasing only within the same node. /}

{PANEL/}

{PANEL: Identities}

If you need IDs to increment across the cluster, you can use the **Identity** option.  
To do so you need to use a pipe (`|`) as a suffix to the provided ID. This will instruct RavenDB 
to create the ID when the document is saved, using a special cluster-wide integer value that is 
continuously incremented.  

{NOTE: }
Using an identity guarantees that IDs will be incremental, but does **not** guarantee 
that there wouldn't be gaps in the sequence.  
The IDs sequence can therefore be, for example, `companies/1`, `companies/2`, `companies/4`..  
This is because -  

 *  Documents could have been deleted.  
 *  A failed transaction still increments the identity value, thus causing a gap in the sequence.  
{NOTE/}

{CODE session_identity_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

After the execution of the code above, the ID will be `companies/1`.  
We do not add the node tag to the end of the ID, because the added number is unique in the cluster.  
Identities continuously increase, so running the above code again will generate `companies/2`, and so on.  

Note that we used `companies` as the prefix just to follow the RavenDB convention.  
Nothing prevents you from providing a different prefix, unrelated to the collection name.

{WARNING: }
Be aware that using the pipe symbol (`|`) as a prefix to the ID generates a call to the cluster 
and might affect performance. 
{WARNING/}

{NOTE: }

* **Identity Parts Separator**  
By default, document IDs created by the server use `/` to separate their components.  
This separator can be changed to any other character except `|`, in the 
[Global Identifier Generation Conventions](../../client-api/configuration/identifier-generation/global#identitypartsseparator).  
See [Setting Identity IDs Using Commands and Operations](../../client-api/document-identifiers/working-with-document-identifiers#setting-identity-ids-using-commands-and-operations) 
for details.  

* **Concurrent writes**  
  The identities are generated and updated on the server side in the atomic fashion.  
  This means you can safely use this approach in the concurrent writes scenario.
{NOTE/}

{PANEL/}

{PANEL: Setting Identity IDs Using Commands and Operations}

The commands API gives you full freedom in selecting the identifier generation strategy.  

* As in the case of a session, you can either ask the server to provide the identifier or provide the identifier of the 
  stored entity manually.  
* You can also indicate if the identifier that you are passing needs to have the identifier suffix added.  
  Do this by ending the ID with `/` or `|` as demonstrated below.  

{CODE commands_identity@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

---

### Using Commands

* **Get the next available identity from the server**  
  You can set an identifier by your client, while still relying on the server to generate the identifier for you.  
  It is done using the `NextIdentityForCommand` command s shown below, with the prefix for which you want the server 
  to provide the next available identifier.  

    {CODE commands_identity_generate@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

    Note that such construction requires approaching the server twice in order to add a single document.  
    You need to call `session.Advanced.RequestExecutor.Execute(command, session.Advanced.Context)` for every 
    entity that you want to store.  

    **Asking** the server about the next identifier results in **increasing this value** on the server-side. 

    Please note that you **cannot** get the next available identifier and increment its value locally to create 
    the identifiers of a whole collection of the same prefix, because you may accidentally overwrite documents or 
    conflicts may occur if another client puts documents using the identifier mechanism.  

* **Provide an identity of your choice**  
  You can choose an identifier's value yourself, using the `SeedIdentityForCommand` command.  
    {CODE commands_identity_set@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

---

### Using Operations

RavenDB ver. 4.2 and higher provides high-level [operations](../../client-api/operations/what-are-operations#operations-what-are-the-operations) 
that you may set IDs with, in addition to the 
low-level [commands](../../client-api/how-to/use-low-level-commands#client-api-how-to-use-low-level-commands) 
we have described above.  
There is no operational difference between using operations and commands, since the high-level operations actually 
execute low-level commands. However, using operations may produce a clearer, more concise code.  

* Use the `NextIdentityForOperation` operation to choose the next value suggested by the server as an ID.  
  It is identical to using the `NextIdentityForCommand` command.  
  {CODE operation_identity_generate@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

* Use the `SeedIdentityForOperation` operation to choose your ID's value yourself.  
  It is identical to using the `SeedIdentityForCommand` command.  
  {CODE operation_identity_set@ClientApi\DocumentIdentifiers\WorkingWithDocumentIdentifiers.cs /}

{PANEL/}

## Related Articles

### Document Identifiers

- [Global ID Generation Conventions](../../client-api/configuration/identifier-generation/global)
- [Type-specific ID Generation Conventions](../../client-api/configuration/identifier-generation/type-specific)
- [HiLo Algorithm](../../client-api/document-identifiers/hilo-algorithm)

### Knowledge Base

- [Document Identifier Generation](../../server/kb/document-identifier-generation)

### Session

- [How to Get Entity ID](../../client-api/session/how-to/get-entity-id)

### Operations

- [How to Get Identities](../../client-api/operations/maintenance/identities/get-identities)

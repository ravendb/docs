# HiLo Algorithm

---

{NOTE: }

* The HiLo algorithm is an efficient solution used by [a session](../session/what-is-a-session-and-how-does-it-work) 
  to generate the numeric parts of unique document identifiers. 
  It is responsible for providing numeric values that are combined with collection names and node tags 
  to create identifiers like `orders/10-A` or `products/93-B`. 

* The HiLo algorithm is the default means of creating unique IDs in RavenDB. It is created 
  by not specifying an `Id` value when creating a new document, 
  as shown in [Autogenerated IDs](../../client-api/document-identifiers/working-with-document-identifiers#autogenerated-ids).

* For other means of generating unique IDs see [Working with Document Identifiers](../../client-api/document-identifiers/working-with-document-identifiers).

* In this page:
   * [How the HiLo Algorithm Works in RavenDB](../../client-api/document-identifiers/hilo-algorithm#how-the-hilo-algorithm-works-in-ravendb)
   * [Returning HiLo Ranges](../../client-api/document-identifiers/hilo-algorithm#returning-hilo-ranges)
   * [Manual HiLo ID Generation](../../client-api/document-identifiers/hilo-algorithm#manual-hilo-id-generation)

{NOTE/}

{PANEL: How the HiLo Algorithm Works in RavenDB}

#### Generating unique IDs efficiently

The HiLo algorithm is efficient because the client can automatically generate unique document IDs 
without checking with the server or cluster each time a new document is created to ensure that the new ID is unique. 
The client uses the HiLo algorithm to do this by getting and reserving a range of available numbers. 
For example, the first client or node to generate documents on a collection will reserve the numbers 1-32. 
The next one will reserve numbers 33-64, and so on.  

To further ensure that no two nodes generate a document with the same ID, a node-tag is added to the number. 
This is an added measure so that if two nodes B and C are working with the same range of numbers, 
the IDs generated will be `orders/54-B` and `orders/54-C`. This situation is unlikely because as long as the nodes can communicate when requesting 
a range of numbers, they will receive a different range of numbers. The node-tag is added just-in-case.  

Thus, with minimal trips to the server, the client is able to determine to which collection an entity belongs, 
and automatically assign it a number with a node-tag to ensure that the ID is unique across the cluster.

#### HiLo documents are used by the server to provide the next range of numbers

To ensure that multiple clients can generate the identifiers simultaneously, they need some mechanism to avoid duplicates. It is ensured with `Raven/HiLo/collection` documents, stored in a database, which are modified by the server. These documents have a very simple construction:

{CODE-BLOCK:json}
{
    "Max": 32,
    "@metadata": {
        "@collection": "@hilo"
    }
}
{CODE-BLOCK/}

The `Max` property means the maximum possible number that has been used by any client to create the identifier for a given collection. It is used as follows:

1. The client asks the server for a range of numbers that he can use to create document (32 is the initial capacity, the actual range size is calculated based on the frequency of getting HiLo by the client.)
2. Then, the server checks the HiLo file to see what is the last number he sent to any client for this collection.
3. The client will get from the server the min and the max values he can use (33 - 64 in our case).
4. Then, the client generates a range object from the values he got from the server to generate identifiers.
5. When the client reaches the max limit, it will repeat the process.

{PANEL/}

{PANEL: Returning HiLo Ranges}

When the document store is disposed, the client sends to the server the last value it used to create an identifier and the max value he got from the server.

If the max value in the server-side is equal to the max value of the client and the last used value by the client is smaller or equal to the max of the server-side, the server will update the `Max` value to the last used value by the client.

{CODE return_hilo_1@ClientApi\DocumentIdentifiers\HiloAlgorithm.cs /}

After execution of the code above, the `Max` value of the Hilo document in the server will be 1. That's because the client used only one identifier from the range he got before we disposed the store.

The next time that a client asks for a range of numbers from the server for this collection he will get (in our example) the range 2 - 33.

{CODE return_hilo_2@ClientApi\DocumentIdentifiers\HiloAlgorithm.cs /}

{PANEL/}

{INFO: Identity Parts Separator}
By default, document IDs created by the server use the character / to separate their components. 
This separator can be changed to any other character except | in the 
[Document Store Conventions](../../client-api/configuration/conventions#changing-the-identity-separator).  
{INFO/}

{PANEL: Manual HiLo ID Generation}

Although [RavenDB's default automatic HiLo generator](../../client-api/document-identifiers/working-with-document-identifiers#autogenerated-ids) 
automatically creates unique IDs, you can also generate HiLo IDs manually.  

The manual generator does not guarantee unique IDs across a cluster because there is no node-tag attached.  
RavenDB's default generator includes the collection name, unique number, and node tag to ensure that
the ID is unique across the cluster.  

{INFO: }
[We can only guarantee unique IDs when you use our generators.](../../client-api/document-identifiers/working-with-document-identifiers)  
If you manually create an ID generator, you are responsible to ensure that the IDs are unique. 
{INFO/}

#### Syntax

{CODE manual_HiLo_Signatures@ClientApi\DocumentIdentifiers\HiloAlgorithm.cs /}

| Parameters | Type | Description |
| ------------- | ------------- | ----- |
| **database** | `string` | The database to write onto. Writing `null` will write onto the default database set in the document store. |
| **collectionName** | `string` | The collection that the document will be added to. |
| **entity** | `object` | An entity that there is a collection of. It is the singular of the collection name. If collection = "Orders", then entity = "Order". |
| **type** | `Type` | The type of object that there is a collection of. |

#### Examples: Manual HiLo Generators

The following example uses the HiLo algorithm so that the client gets a unique range of numbers 
from the server, then uses these numbers to generate IDs with minimal calls to the server.  

It provides the number, without the node tag.  

{CODE manual_hilo_sample@ClientApi\DocumentIdentifiers\HiloAlgorithm.cs /}

{INFO: Unique IDs across the cluster}
This manual generator sample is sufficient if you are using only one server, but if you want to ensure unique IDs across the cluster, 
we recommend either using [our default generator](../../client-api/document-identifiers/working-with-document-identifiers#autogenerated-ids) 
or a cluster-wide Identities generator.  

The [cluster-wide Identities generator](../../client-api/document-identifiers/working-with-document-identifiers#identities) 
guarantees a unique ID across the cluster.  
It is more costly than our default HiLo generator because it requires a request from the server for _each ID_  
and the server needs to do a Raft consensus check 
to ensure that every node in the cluster agree that the ID is unique, then returns the ID to the client.
{INFO/}

{PANEL/}

## Related Articles

### Document Identifiers

- [Working with Document Identifiers](../../client-api/document-identifiers/working-with-document-identifiers)
- [Global ID Generation Conventions](../../client-api/configuration/identifier-generation/global)
- [Type-specific ID Generation Conventions](../../client-api/configuration/identifier-generation/type-specific)

### Knowledge Base

- [Document Identifier Generation](../../server/kb/document-identifier-generation)

### Session

- [How to Get Entity ID](../../client-api/session/how-to/get-entity-id)

### Operations

- [How to Get Identities](../../client-api/operations/maintenance/identities/get-identities)

---

### Inside RavenDB

-[Client-side identifier generation (HiLo)](https://ravendb.net/learn/inside-ravendb-book/reader/4.0/2-zero-to-ravendb#client-side-identifier-generation-hilo)

#Document identifier generatation

A document key (also called a document identifier) is a unique string associated with a document which allows to differ the document from the other ones.
There are two limitations for document identifiers:

* Maximum length allowed is 1023 unicode characters
* Cannot contain `\` character

RavenDB server supports three document key generation strategies. Their descriptions below refer purely to server side behavior. Knowledge of them is important mostly
when you save a document by using REST API, however RavenDB client also takes advantage of them, so it's good to know how it all works under the hood.

##Autogenerated GUID

When a document key is not specified, Raven will generate a globally unique identifier (`Guid`) for the stored document. This function can be used when you don't care for 
the document key, for example when saving log entries, or when the user will never be exposed to the document key.

##Semantic key

The problem with Guids is that they are not human friendly. They are very hard to read, compare etc. The much better option is to have ids that contain useful information about the documents.
You know best what you need and how your keys should look like, so you can decide what id the document will have before saving it. Then RavenDB will use the assigned key.
It is most often used when you save documents which already have native id, such as users; then you can use keys like `users/ayende`.

##Server-side identifier generation
You can ask RavenDB to assign a document ID to a new document when it is saved.
There you can allow RavenDB to take care of creating your keys sequentially, by adding the incremented number value at the end of the key. 
In order to use this option you need to follow the convention: the key you specify during save ends with a pipe symbol (`|`) or with (`\`).

Providing a document ID that ends with the symbol (`\`) will tell RavenDb to create a server-side ID. Raven will create a new etag for this perticular server and will add it
to the end of the ID with the server node tag  (the only guarantee you have about this value is that it’s always will be uniqe).
Let's see the example:

{CODE-BLOCK:plain}
SAVE 'users/' -> will assign 'users/0000000000000000001-A'
SAVE 'users/' -> will assign 'users/0000000000000000002-A'
{CODE-BLOCK/}

For this option RavenDB will use the etag of the perticular server you saved documents too, so if we have a cluster with two nodes on it for example A and B the etag can be different between them and we will get something like that:

{CODE-BLOCK:plain}
SAVE 'users/' on server A with etag 11 -> will assign 'users/0000000000000000012-A'
SAVE 'users/' on server B with etag 3 -> will assign 'users/0000000000000000004-B'
{CODE-BLOCK/}

This approach is recommended for most scenarios, since it produces keys that are readable for humans.

Providing a document ID that ends with the pipe symbol (`|`) is very similar to the (`\`) symbol but this option is cluster-wide.
that mean that raven uses a simple always-incrementing value.
When using this symbol RavenDB will change the pipe symbol to '\' and will add the ID value to the end of the given prefix.
The biggest problem with this approch is that generating them in a distributed database requires us to do a lot more work than one might think. In order to
prevent races, such as two clients generating the same identity on two different servers, part of the process of generating a new identity requires the nodes to coordinate with one another.
That means we need to go over the network and talk to the other members in the cluster to guarantee we have the next value of the identity. That can
increase the cost of saving a new document with identity so take it in account when using this option. 

{CODE-BLOCK:plain}
SAVE 'users/' -> will assign 'users/1'
SAVE 'users/' -> will assign 'users/2'
{CODE-BLOCK/}

{NOTE:NOTE}
Because we guarantee that identities are always consecutive across the cluster,
if there's a failure scenario that prevents us from talking to a majority of the nodes, we'll not be able to generate the identity at all, and we'll fail to save the
new document.
{NOTE /}

## Related articles

- [Working with document identifiers](../../client-api/document-identifiers/working-with-document-identifiers)

- [HiLo algorithm](../../client-api/document-identifiers/hilo-algorithm)

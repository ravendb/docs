<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncCtpLibrary_Silverlight5</name>
    </assembly>
    <members>
        <member name="T:AsyncCtpExtensions">
            <summary>Asynchronous wrappers for .NET Framework operations.</summary>
        </member>
        <member name="M:AsyncCtpExtensions.DownloadStringTaskAsync(System.Net.WebClient,System.String)">
            <summary>Downloads the resource with the specified URI as a string, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <returns>A Task that contains the downloaded string.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.DownloadStringTaskAsync(System.Net.WebClient,System.Uri)">
            <summary>Downloads the resource with the specified URI as a string, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <returns>A Task that contains the downloaded string.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.DownloadStringTaskAsync(System.Net.WebClient,System.Uri,System.Threading.CancellationToken)">
            <summary>Downloads the resource with the specified URI as a string, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <param name="cancellationToken">A token used to signal cancellation.</param>
            <returns>A Task that contains the downloaded string.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.DownloadStringTaskAsync(System.Net.WebClient,System.Uri,System.Threading.CancellationToken,System.IProgress{System.Net.DownloadProgressChangedEventArgs})">
            <summary>Downloads the resource with the specified URI as a string, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI from which to download data.</param>
            <param name="cancellationToken">A token used to signal cancellation.</param>
            <param name="progress">An object into which progress is stored.</param>
            <returns>A Task that contains the downloaded string.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.OpenReadTaskAsync(System.Net.WebClient,System.String)">
            <summary>Opens a readable stream for the data downloaded from a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.OpenReadTaskAsync(System.Net.WebClient,System.Uri)">
            <summary>Opens a readable stream for the data downloaded from a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.OpenWriteTaskAsync(System.Net.WebClient,System.String)">
            <summary>Opens a writeable stream for uploading data to a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.OpenWriteTaskAsync(System.Net.WebClient,System.Uri)">
            <summary>Opens a writeable stream for uploading data to a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.OpenWriteTaskAsync(System.Net.WebClient,System.String,System.String)">
            <summary>Opens a writeable stream for uploading data to a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <param name="method">The HTTP method that should be used to open the stream.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.OpenWriteTaskAsync(System.Net.WebClient,System.Uri,System.String)">
            <summary>Opens a writeable stream for uploading data to a resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI for which the stream should be opened.</param>
            <param name="method">The HTTP method that should be used to open the stream.</param>
            <returns>A Task that contains the opened stream.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.UploadStringTaskAsync(System.Net.WebClient,System.String,System.String)">
            <summary>Uploads data in a string to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.UploadStringTaskAsync(System.Net.WebClient,System.Uri,System.String)">
            <summary>Uploads data in a string to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.UploadStringTaskAsync(System.Net.WebClient,System.String,System.String,System.String)">
            <summary>Uploads data in a string to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the data.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.UploadStringTaskAsync(System.Net.WebClient,System.Uri,System.String,System.String)">
            <summary>Uploads data in a string to the specified resource, asynchronously.</summary>
            <param name="webClient">The WebClient.</param>
            <param name="address">The URI to which the data should be uploaded.</param>
            <param name="method">The HTTP method that should be used to upload the data.</param>
            <param name="data">The data to upload.</param>
            <returns>A Task containing the data in the response from the upload.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.GetUri(System.Net.WebClient,System.String)">
            <summary>Converts a path to a Uri using the WebClient's logic.</summary>
            <remarks>Based on WebClient's private GetUri method.</remarks>
        </member>
        <member name="M:AsyncCtpExtensions.GetUri(System.Net.WebClient,System.Uri)">
            <summary>Converts a path to a Uri using the WebClient's logic.</summary>
            <remarks>Based on WebClient's private GetUri method.</remarks>
        </member>
        <member name="M:AsyncCtpExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>A Task that represents the asynchronous read.</returns>
            <param name="source">The source.</param>
            <param name="buffer">The buffer to read data into. </param>
            <param name="offset">The byte offset in  at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <exception cref="T:System.ArgumentException">The array length minus  is less than <paramref name="count" />. </exception>
            <exception cref="T:System.ArgumentNullException"> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An asynchronous read was attempted past the end of the file. </exception>
        </member>
        <member name="M:AsyncCtpExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes asynchronously a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <returns>A Task that represents the asynchronous write.</returns>
            <param name="source">The source.</param>
            <param name="buffer">The buffer containing data to write to the current stream.</param>
            <param name="offset">The zero-based byte offset in  at which to begin copying bytes to the current stream.</param>
            <param name="count">The maximum number of bytes to write. </param>
            <exception cref="T:System.ArgumentException"> length minus <paramref name="offset" /> is less than <paramref name="count" />. </exception>
            <exception cref="T:System.ArgumentNullException"> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
        </member>
        <member name="M:AsyncCtpExtensions.GetResponseAsync(System.Net.WebRequest)">
            <summary>Starts an asynchronous request for a web resource.</summary>
            <returns>Task that represents the asynchronous request.</returns>
            <exception cref="T:System.InvalidOperationException">The stream is already in use by a previous call to . </exception>
            <PermissionSet>    <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />  </PermissionSet>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.GetRequestStreamAsync(System.Net.WebRequest)">
            <summary>Starts an asynchronous request for a  object to use to write data.</summary>
            <returns>Task that represents the asynchronous request.</returns>
            <exception cref="T:System.Net.ProtocolViolationException">The  property is GET and the application writes to the stream. </exception>
            <exception cref="T:System.InvalidOperationException">The stream is being used by a previous call to . </exception>
            <exception cref="T:System.ApplicationException">No write stream is available. </exception>
            <PermissionSet>    <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />  </PermissionSet>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.CloseAsync(System.ServiceModel.ICommunicationObject)">
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.CloseAsync(System.ServiceModel.ICommunicationObject,System.TimeSpan)">
            <summary>Starts an asynchronous operation invoked when the workflow service host is closed.</summary>
            <returns>A reference to the asynchronous close operation.</returns>
            <param name="timeout">The period of time the asynchronous close operation has to complete before timing out.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.OpenAsync(System.ServiceModel.ICommunicationObject)">
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.OpenAsync(System.ServiceModel.ICommunicationObject,System.TimeSpan)">
            <summary>Starts an asynchronous operation invoked when the workflow service host is opened.</summary>
            <returns>A reference to the asynchronous operation.</returns>
            <param name="timeout">The period of time the asynchronous open operation has to complete before timing out.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.WaitForMessageAsync(System.ServiceModel.Channels.IInputChannel,System.TimeSpan)">
            <summary>Starts an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it. </summary>
            <returns>The Task that represents the asynchronous operation to wait for a message to arrive.</returns>
            <param name="timeout">The  that specifies the interval of time to wait for a message to become available.</param>
            <exception cref="T:System.TimeoutException">The specified  is exceeded before the operation is completed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.SendAsync(System.ServiceModel.Channels.IOutputChannel,System.ServiceModel.Channels.Message)">
            <summary>Starts an asynchronous operation to transmit a message to the destination of the output channel. </summary>
            <returns>The Task that represents the asynchronous message transmission. </returns>
            <param name="message">The  being sent on the output channel. </param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.SendAsync(System.ServiceModel.Channels.IOutputChannel,System.ServiceModel.Channels.Message,System.TimeSpan)">
            <summary>Starts an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
            <returns>The Task that represents the asynchronous send operation.</returns>
            <param name="message">The  being sent on the output channel.</param>
            <param name="timeout">The  that specifies how long the send operation has to complete before timing out.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.CloseOutputSessionAsync(System.ServiceModel.Channels.IDuplexSession)">
            <summary>Starts an asynchronous operation to terminate the outbound session.</summary>
            <returns>The Task that represents the asynchronous outbound session termination. </returns>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.CloseOutputSessionAsync(System.ServiceModel.Channels.IDuplexSession,System.TimeSpan)">
            <summary>Starts an asynchronous operation to close an output session on the client that has a specified time out and state object associated with it. </summary>
            <returns>The Task that represents the asynchronous close operation.</returns>
            <param name="timeout">The  that specifies how long the close operation has to complete before timing out.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.RequestAsync(System.ServiceModel.Channels.IRequestChannel,System.ServiceModel.Channels.Message)">
            <summary>Initiates the asynchronous processing of the message.</summary>
            <returns>An asynchronous result that can be used to poll or wait for results, or both; this value is also required when invoking Task.</returns>
            <param name="message">The message to be processed.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.RequestAsync(System.ServiceModel.Channels.IRequestChannel,System.ServiceModel.Channels.Message,System.TimeSpan)">
            <summary>Starts an asynchronous operation to transmit a request message to the reply side of a request-reply message exchange within a specified interval of time.</summary>
            <returns>The Task that represents the asynchronous message transmission. </returns>
            <param name="message">The request  to be transmitted.</param>
            <param name="timeout">The  that specifies the interval of time within which a response must be received. (For defaults, see the Remarks section.)</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.ReplyAsync(System.ServiceModel.Channels.RequestContext,System.ServiceModel.Channels.Message)">
            <summary>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context.</summary>
            <returns>The Task that represents the asynchronous reply operation.</returns>
            <param name="message">The incoming  that contains the request.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.ReplyAsync(System.ServiceModel.Channels.RequestContext,System.ServiceModel.Channels.Message,System.TimeSpan)">
            <summary>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context within a specified interval of time.</summary>
            <returns>The Task that represents the asynchronous reply operation.</returns>
            <param name="message">The incoming  that contains the request.</param>
            <param name="timeout">The  that specifies the interval of time to wait for the reply to an available request.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:AsyncCtpExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads all the bytes from the current stream and writes them to the destination stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="destination">The stream that will contain the contents of the current stream.</param>
            <returns>A Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads all the bytes from the current stream and writes them to the destination stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="destination">The stream that will contain the contents of the current stream.</param>
            <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 4096.</param>
            <returns>A Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads all the bytes from the current stream and writes them to the destination stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="destination">The stream that will contain the contents of the current stream.</param>
            <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 4096.</param>
            <param name="cancellationToken">The cancellation token to use to cancel the asynchronous operation.</param>
            <returns>A Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:AsyncCtpExtensions.ReadAsync(System.IO.TextReader,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of count characters from the reader asynchronously and writes
            the data to buffer, beginning at index.
            </summary>
            <param name="buffer">
            When the operation completes, contains the specified character array with the
            values between index and (index + count - 1) replaced by the characters read
            from the current source.
            </param>
            <param name="count">
            The maximum number of characters to read. If the end of the stream is reached
            before count of characters is read into buffer, the current method returns.
            </param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="source">the source reader.</param>
            <returns>A Task that represents the asynchronous operation.</returns>
            <remarks>This method is not currently implemented using asynchronous I/O.</remarks>
        </member>
        <member name="M:AsyncCtpExtensions.ReadLineAsync(System.IO.TextReader)">
            <summary>
            Reads a line of characters from the reader and returns the string asynchronously.
            </summary>
            <param name="source">the source reader.</param>
            <returns>A Task that represents the asynchronous operation.</returns>
            <remarks>This method is not currently implemented using asynchronous I/O.</remarks>
        </member>
        <member name="M:AsyncCtpExtensions.ReadToEndAsync(System.IO.TextReader)">
            <summary>
            Reads all characters from the current position to the end of the TextReader
            and returns them as one string asynchronously.
            </summary>
            <param name="source">the source reader.</param>
            <returns>A Task that represents the asynchronous operation.</returns>
            <remarks>This method is not currently implemented using asynchronous I/O.</remarks>
        </member>
        <member name="M:AsyncCtpExtensions.WriteAsync(System.IO.TextWriter,System.String)">
            <summary>Writes a string asynchronously to a text stream.</summary>
            <param name="target">The writer.</param>
            <param name="value">The string to write.</param>
            <returns>A Task representing the asynchronous write.</returns>
        </member>
        <member name="T:System.ProgressEventHandler`1">
            <summary>Event handler for progress reports.</summary>
            <typeparam name="T">Specifies the type of data for the progress report.</typeparam>
            <param name="sender">The sender of the report.</param>
            <param name="value">The reported value.</param>
        </member>
        <member name="T:System.Progress`1">
            <summary>
            Provides an IProgress{T} that invokes callbacks for each reported progress value.
            </summary>
            <typeparam name="T">Specifies the type of the progress report value.</typeparam>
            <remarks>
            Any handler provided to the constructor or event handlers registered with
            the <see cref="E:System.Progress`1.ProgressChanged"/> event are invoked through a 
            <see cref="T:System.Threading.SynchronizationContext"/> instance captured
            when the instance is constructed.  If there is no current SynchronizationContext
            at the time of construction, the callbacks will be invoked on the ThreadPool.
            </remarks>
        </member>
        <member name="T:System.IProgress`1">
            <summary>Defines a provider for progress updates.</summary>
            <typeparam name="T">The type of progress update value.</typeparam>
        </member>
        <member name="M:System.IProgress`1.Report(`0)">
            <summary>Reports a progress update.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="F:System.Progress`1.m_synchronizationContext">
            <summary>The synchronization context captured upon construction.  This will never be null.</summary>
        </member>
        <member name="F:System.Progress`1.m_handler">
            <summary>The handler specified to the constructor.  This may be null.</summary>
        </member>
        <member name="F:System.Progress`1.m_invokeHandlers">
            <summary>A cached delegate used to post invocation to the synchronization context.</summary>
        </member>
        <member name="M:System.Progress`1.#ctor">
            <summary>Initializes the <see cref="T:System.Progress`1"/>.</summary>
        </member>
        <member name="M:System.Progress`1.#ctor(System.Action{`0})">
            <summary>Initializes the <see cref="T:System.Progress`1"/> with the specified callback.</summary>
            <param name="handler">
            A handler to invoke for each reported progress value.  This handler will be invoked
            in addition to any delegates registered with the <see cref="E:System.Progress`1.ProgressChanged"/> event.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:System.Progress`1.OnReport(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:System.Progress`1.InvokeHandlers(System.Object)">
            <summary>Invokes the action and event callbacks.</summary>
            <param name="state">The progress value.</param>
        </member>
        <member name="E:System.Progress`1.ProgressChanged">
            <summary>Raised for each reported progress value.</summary>
            <remarks>
            Handlers registered with this event will be invoked on the 
            <see cref="T:System.Threading.SynchronizationContext"/> captured when the instance was constructed.
            </remarks>
        </member>
        <member name="T:System.ProgressStatics">
            <summary>Holds static values for <see cref="T:System.Progress`1"/>.</summary>
            <remarks>This avoids one static instance per type T.</remarks>
        </member>
        <member name="F:System.ProgressStatics.DefaultContext">
            <summary>A default synchronization context that targets the ThreadPool.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
            <summary>Provides an awaitable context for switching into a target environment.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.YieldAwaitable.m_target">
            <summary>The target environment to which to switch.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.YieldAwaitable.#ctor(System.Object)">
            <summary>Initializes the awaitable context.</summary>
            <param name="target">The target environment into which to switch.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
            <summary>Gets an awaiter for this <see cref="T:System.Runtime.CompilerServices.YieldAwaitable"/>.</summary>
            <returns>An awaiter for this awaitable.</returns>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
            <summary>Provides an awaiter that switches into a target environment.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.m_target">
            <summary>The target environment to which to switch.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.#ctor(System.Object)">
            <summary>Initializes the awaiter.</summary>
            <param name="target">The target environment into which to switch.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
            <summary>Posts the <paramref name="continuation"/> back to the current context.</summary>
            <param name="continuation">The action to invoke asynchronously.</param>
            <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
            <summary>Ends the await operation.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
            <summary>Gets whether a yield is not required.</summary>
            <remarks>This property is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
            <summary>
            Provides a builder for asynchronous methods that return void.
            This type is intended for compiler use only.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.#cctor">
            <summary>Temporary support for disabling crashing if tasks go unobserved.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.s_noContextCaptured">
            <summary>A marker to indicate that no instance was captured.</summary>
            <remarks>
            This allows the default value of null to mean that builder was improperly initialized.
            The instance is used only for its object equality.
            </remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.m_synchronizationContext">
            <summary>The synchronization context associated with this operation.</summary>
            <remarks>This should never be null for a properly initialized builder.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
            <summary>Initializes a new <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder"/>.</summary>
            <returns>The initialized <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder"/>.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.#ctor(System.Threading.SynchronizationContext)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder"/>.</summary>
            <param name="synchronizationContext">The synchronizationContext associated with this operation. This may be null.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
            <summary>Completes the method builder successfully.</summary>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
            <summary>Faults the method builder with an exception.</summary>
            <param name="exception">The exception that is the cause of this fault.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.VoidType">
            <summary>Void type placeholder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
            <summary>
            Provides a builder for asynchronous methods that return <see cref="T:System.Threading.Tasks.Task"/>.
            This type is intended for compiler use only.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.m_builder">
            <summary>The generic builder object to which this non-generic instance delegates.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
            <summary>Initializes a new <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"/>.</summary>
            <returns>The initialized <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"/>.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.#ctor(System.Runtime.CompilerServices.AsyncTaskMethodBuilder{System.Runtime.CompilerServices.VoidType})">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"/>.</summary>
            <param name="underlyingBuilder">The underlying builder used for this builder.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
            <summary>
            Completes the <see cref="T:System.Threading.Tasks.Task"/> in the 
            <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
            <summary>
            Completes the <see cref="T:System.Threading.Tasks.Task"/> in the 
            <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state with the specified exception.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to use to fault the task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
            <summary>Gets the <see cref="T:System.Threading.Tasks.Task"/> for this builder.</summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> representing the builder's asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
            <summary>
            Provides a builder for asynchronous methods that return <see cref="T:System.Threading.Tasks.Task`1"/>.
            This type is intended for compiler use only.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.#cctor">
            <summary>Temporary support for disabling crashing if tasks go unobserved.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.m_tcs">
            <summary>The built task.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
            <summary>Initializes a new <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"/>.</summary>
            <returns>The initialized <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder"/>.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.#ctor(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>Initializes the AsyncTaskMethodBuilder.</summary>
            <param name="tcs">The task being built by the builder.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            Completes the <see cref="T:System.Threading.Tasks.Task`1"/> in the 
            <see cref="T:System.Threading.Tasks.TaskStatus">RanToCompletion</see> state with the specified result.
            </summary>
            <param name="result">The result to use to complete the task.</param>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Completes the <see cref="T:System.Threading.Tasks.Task`1"/> in the 
            <see cref="T:System.Threading.Tasks.TaskStatus">Faulted</see> state with the specified exception.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to use to fault the task.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
            <summary>Gets the <see cref="T:System.Threading.Tasks.Task`1"/> for this builder.</summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> representing the builder's asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
            <summary>Provides an awaiter for awaiting a <see cref="T:System.Threading.Tasks.Task"/>.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.TaskAwaiter.CONTINUE_ON_CAPTURED_CONTEXT_DEFAULT">
            <summary>The default value to use for continueOnCapturedContext.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.TaskAwaiter.m_task">
            <summary>The task being awaited.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter.#ctor(System.Threading.Tasks.Task)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/>.</summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to be awaited.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
            <summary>Schedules the continuation onto the <see cref="T:System.Threading.Tasks.Task"/> associated with this <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/>.</summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The awaiter was not properly initialized.</exception>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult">
            <summary>Ends the await on the completed <see cref="T:System.Threading.Tasks.Task"/>.</summary>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task was not yet completed.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
            <exception cref="T:System.Exception">The task completed in a Faulted state.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(System.Threading.Tasks.Task)">
            <summary>
            Fast checks for the end of an await operation to determine whether more needs to be done
            prior to completing the await.
            </summary>
            <param name="task">The awaited task.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(System.Threading.Tasks.Task)">
            <summary>Throws an exception to handle a task that completed in a state other than RanToCompletion.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompletedInternal(System.Threading.Tasks.Task,System.Action,System.Boolean)">
            <summary>Schedules the continuation onto the <see cref="T:System.Threading.Tasks.Task"/> associated with this <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/>.</summary>
            <param name="task">The awaited task.</param>
            <param name="continuation">The action to invoke when the await operation completes.</param>
            <param name="continueOnCapturedContext">Whether to capture and marshal back to the current context.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter.PrepareExceptionForRethrow(System.Exception)">
            <summary>Copies the exception's stack trace so its stack trace isn't overwritten.</summary>
            <param name="exc">The exception to prepare.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
            <summary>Gets whether the task being awaited is completed.</summary>
            <remarks>This property is intended for compiler user rather than use directly in code.</remarks>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.TaskAwaiter`1">
            <summary>Provides an awaiter for awaiting a <see cref="T:System.Threading.Tasks.Task`1"/>.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.TaskAwaiter`1.m_task">
            <summary>The task being awaited.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1"/>.</summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
            <summary>Schedules the continuation onto the <see cref="T:System.Threading.Tasks.Task"/> associated with this <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/>.</summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
            <summary>Ends the await on the completed <see cref="T:System.Threading.Tasks.Task`1"/>.</summary>
            <returns>The result of the completed <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task was not yet completed.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
            <exception cref="T:System.Exception">The task completed in a Faulted state.</exception>
        </member>
        <member name="P:System.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
            <summary>Gets whether the task being awaited is completed.</summary>
            <remarks>This property is intended for compiler user rather than use directly in code.</remarks>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable">
            <summary>Provides an awaitable object that allows for configured awaits on <see cref="T:System.Threading.Tasks.Task"/>.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.m_configuredTaskAwaiter">
            <summary>The task being awaited.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.#ctor(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable"/>.</summary>
            <param name="task">The awaitable <see cref="T:System.Threading.Tasks.Task"/>.</param>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original context captured; otherwise, false.
            </param>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
            <summary>Gets an awaiter for this awaitable.</summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
            <summary>Provides an awaiter for a <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable"/>.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.m_task">
            <summary>The task being awaited.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.m_continueOnCapturedContext">
            <summary>Whether to attempt marshaling back to the original context.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.#ctor(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"/>.</summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to await.</param>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original context captured
            when BeginAwait is called; otherwise, false.
            </param>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>Schedules the continuation onto the <see cref="T:System.Threading.Tasks.Task"/> associated with this <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/>.</summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
            <summary>Ends the await on the completed <see cref="T:System.Threading.Tasks.Task"/>.</summary>
            <returns>The result of the completed <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task was not yet completed.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
            <exception cref="T:System.Exception">The task completed in a Faulted state.</exception>
        </member>
        <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
            <summary>Gets whether the task being awaited is completed.</summary>
            <remarks>This property is intended for compiler user rather than use directly in code.</remarks>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
            <summary>Provides an awaitable object that allows for configured awaits on <see cref="T:System.Threading.Tasks.Task`1"/>.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.m_configuredTaskAwaiter">
            <summary>The underlying awaitable on whose logic this awaitable relies.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.#ctor(System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1"/>.</summary>
            <param name="task">The awaitable <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original context captured; otherwise, false.
            </param>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
            <summary>Gets an awaiter for this awaitable.</summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
            <summary>Provides an awaiter for a <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1"/>.</summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.m_task">
            <summary>The task being awaited.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.m_continueOnCapturedContext">
            <summary>Whether to attempt marshaling back to the original context.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.#ctor(System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter"/>.</summary>
            <param name="task">The awaitable <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <param name="continueOnCapturedContext">
            true to attempt to marshal the continuation back to the original context captured; otherwise, false.
            </param>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>Schedules the continuation onto the <see cref="T:System.Threading.Tasks.Task"/> associated with this <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/>.</summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
            <summary>Ends the await on the completed <see cref="T:System.Threading.Tasks.Task`1"/>.</summary>
            <returns>The result of the completed <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
            <exception cref="T:System.InvalidOperationException">The task was not yet completed.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was canceled.</exception>
            <exception cref="T:System.Exception">The task completed in a Faulted state.</exception>
        </member>
        <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
            <summary>Gets whether the task being awaited is completed.</summary>
            <remarks>This property is intended for compiler user rather than use directly in code.</remarks>
            <exception cref="T:System.NullReferenceException">The awaiter was not properly initialized.</exception>
        </member>
        <member name="T:System.Threading.Tasks.SR">
            <summary>String resources for the assembly.</summary>
        </member>
        <member name="T:System.Threading.Tasks.EAPCommon">
            <summary>
            Internal helpers for wrapping the event-based asynchronous pattern.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.EAPCommon.HandleProgress``2(System.Threading.Tasks.TaskCompletionSource{``0},System.ComponentModel.ProgressChangedEventArgs,System.Func{``1},System.IProgress{``1})">
            <summary>
            Raises progress callbacks.
            </summary>
            <typeparam name="T">Specifies the type of data returned by the Task.</typeparam>
            <typeparam name="E">Specifies the type of data provided to progress callbacks.</typeparam>
            <param name="tcs">The TaskCompletionsource.</param>
            <param name="eventArgs">The progress event arguments.</param>
            <param name="getProgress">A function to retrieve the progress data to publish.</param>
            <param name="callback">The progress callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.EAPCommon.HandleCompletion``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Boolean,System.ComponentModel.AsyncCompletedEventArgs,System.Func{``0},System.Action)">
            <summary>
            Completes the Task if the user state matches the TaskCompletionSource.
            </summary>
            <typeparam name="T">Specifies the type of data returned by the Task.</typeparam>
            <param name="tcs">The TaskCompletionSource.</param>
            <param name="e">The completion event arguments.</param>
            <param name="requireMatch">Whether we require the tcs to match the e.UserState.</param>
            <param name="getResult">A function that gets the result with which to complete the task.</param>
            <param name="unregisterHandler">An action used to unregister work when the operaiton completes.</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskEx">
            <summary>Provides methods for creating and manipulating tasks.</summary>
            <remarks>TaskEx is a placeholder.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run(System.Action)">
            <summary>Creates a task that runs the specified action.</summary>
            <param name="action">The action to execute asynchronously.</param>
            <returns>A task that represents the completion of the action.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run(System.Action,System.Threading.CancellationToken)">
            <summary>Creates a task that runs the specified action.</summary>
            <param name="action">The action to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to request cancellation of this task.</param>
            <returns>A task that represents the completion of the action.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run``1(System.Func{``0})">
            <summary>Creates a task that runs the specified function.</summary>
            <param name="function">The function to execute asynchronously.</param>
            <returns>A task that represents the completion of the action.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>Creates a task that runs the specified function.</summary>
            <param name="function">The action to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to cancel the task.</param>
            <returns>A task that represents the completion of the action.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.RunEx(System.Func{System.Threading.Tasks.Task})">
            <summary>Creates a task that runs the specified function.</summary>
            <param name="function">The action to execute asynchronously.</param>
            <returns>A task that represents the completion of the action.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.RunEx(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>Creates a task that runs the specified function.</summary>
            <param name="function">The function to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to request cancellation of this task.</param>
            <returns>A task that represents the completion of the function.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.RunEx``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Creates a task that runs the specified function.</summary>
            <param name="function">The function to execute asynchronously.</param>
            <returns>A task that represents the completion of the action.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.RunEx``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>Creates a task that runs the specified function.</summary>
            <param name="function">The action to execute.</param>
            <param name="cancellationToken">The CancellationToken to use to cancel the task.</param>
            <returns>A task that represents the completion of the action.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.Int32)">
            <summary>Starts a Task that will complete after the specified due time.</summary>
            <param name="dueTime">The delay in milliseconds before the returned task completes.</param>
            <returns>The timed Task.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.TimeSpan)">
            <summary>Starts a Task that will complete after the specified due time.</summary>
            <param name="dueTime">The delay before the returned task completes.</param>
            <returns>The timed Task.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Starts a Task that will complete after the specified due time.</summary>
            <param name="dueTime">The delay before the returned task completes.</param>
            <param name="cancellationToken">A CancellationToken that may be used to cancel the task before the due time occurs.</param>
            <returns>The timed Task.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>Starts a Task that will complete after the specified due time.</summary>
            <param name="dueTime">The delay in milliseconds before the returned task completes.</param>
            <param name="cancellationToken">A CancellationToken that may be used to cancel the task before the due time occurs.</param>
            <returns>The timed Task.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
            </exception>
        </member>
        <member name="F:System.Threading.Tasks.TaskEx.s_preCompletedTask">
            <summary>An already completed task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskEx.s_preCanceledTask">
            <summary>An already canceled task.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll(System.Threading.Tasks.Task[])">
            <summary>Creates a Task that will complete only when all of the provided collection of Tasks has completed.</summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>A Task that represents the completion of all of the provided tasks.</returns>
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
            about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
            Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>Creates a Task that will complete only when all of the provided collection of Tasks has completed.</summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>A Task that represents the completion of all of the provided tasks.</returns>
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
            about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
            Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>Creates a Task that will complete only when all of the provided collection of Tasks has completed.</summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>A Task that represents the completion of all of the provided tasks.</returns>
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
            about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
            Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>Creates a Task that will complete only when all of the provided collection of Tasks has completed.</summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>A Task that represents the completion of all of the provided tasks.</returns>
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
            about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
            Task will also be canceled.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAllCore``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task[],System.Threading.Tasks.TaskCompletionSource{``0}})">
            <summary>Creates a Task that will complete only when all of the provided collection of Tasks has completed.</summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <param name="setResultAction">
            A callback invoked when all of the tasks complete successfully in the RanToCompletion state.
            This callback is responsible for storing the results into the TaskCompletionSource.
            </param>
            <returns>A Task that represents the completion of all of the provided tasks.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny(System.Threading.Tasks.Task[])">
            <summary>Creates a Task that will complete when any of the tasks in the provided collection completes.</summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>Any Tasks that fault will need to have their exceptions observed elsewhere.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>Creates a Task that will complete when any of the tasks in the provided collection completes.</summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>Any Tasks that fault will need to have their exceptions observed elsewhere.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>Creates a Task that will complete when any of the tasks in the provided collection completes.</summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>Any Tasks that fault will need to have their exceptions observed elsewhere.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>Creates a Task that will complete when any of the tasks in the provided collection completes.</summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            </returns>
            <remarks>Any Tasks that fault will need to have their exceptions observed elsewhere.</remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.Yield">
            <summary>Creates an awaitable that asynchronously yields back to the current context when awaited.</summary>
            <returns>
            A context that, when awaited, will asynchronously transition back into the current context.
            If SynchronizationContext.Current is non-null, that is treated as the current context.
            Otherwise, TaskScheduler.Current is treated as the current context.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.FromResult``1(``0)">
            <summary>Creates an already completed <see cref="T:System.Threading.Tasks.Task`1"/> from the specified result.</summary>
            <param name="result">The result from which to create the completed task.</param>
            <returns>The completed task.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.ConfigureAwait(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Creates and configures an awaitable object for awaiting the specified task.</summary>
            <param name="task">The task to be awaited.</param>
            <param name="continueOnCapturedContext">
            true to automatic marshag back to the original call site's current SynchronizationContext
            or TaskScheduler; otherwise, false.
            </param>
            <returns>The instance to be awaited.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.ConfigureAwait``1(System.Threading.Tasks.Task{``0},System.Boolean)">
            <summary>Creates and configures an awaitable object for awaiting the specified task.</summary>
            <param name="task">The task to be awaited.</param>
            <param name="continueOnCapturedContext">
            true to automatic marshag back to the original call site's current SynchronizationContext
            or TaskScheduler; otherwise, false.
            </param>
            <returns>The instance to be awaited.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskEx.AddPotentiallyUnwrappedExceptions(System.Collections.Generic.List{System.Exception}@,System.Exception)">
            <summary>Adds the target exception to the list, initializing the list if it's null.</summary>
            <param name="targetList">The list to which to add the exception and initialize if the list is null.</param>
            <param name="exception">The exception to add, and unwrap if it's an aggregate.</param>
        </member>
        <member name="T:AsyncCtpThreadingExtensions">
            <summary>Provides extension methods for threading-related types.</summary>
            <remarks>AsyncCtpThreadingExtensions is a placeholder.</remarks>
        </member>
        <member name="M:AsyncCtpThreadingExtensions.GetAwaiter(System.Threading.Tasks.Task)">
            <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"/>.</summary>
            <param name="task">The task to await.</param>
            <returns>An awaiter instance.</returns>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="M:AsyncCtpThreadingExtensions.GetAwaiter``1(System.Threading.Tasks.Task{``0})">
            <summary>Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"/>.</summary>
            <typeparam name="TResult">Specifies the type of data returned by the task.</typeparam>
            <param name="task">The task to await.</param>
            <returns>An awaiter instance.</returns>
            <remarks>This method is intended for compiler user rather than use directly in code.</remarks>
        </member>
        <member name="M:AsyncCtpThreadingExtensions.CancelAfter(System.Threading.CancellationTokenSource,System.Int32)">
            <summary>Cancels the <see cref="T:System.Threading.CancellationTokenSource"/> after the specified duration.</summary>
            <param name="source">The CancellationTokenSource.</param>
            <param name="dueTime">The due time in milliseconds for the source to be canceled.</param>
        </member>
        <member name="M:AsyncCtpThreadingExtensions.CancelAfter(System.Threading.CancellationTokenSource,System.TimeSpan)">
            <summary>Cancels the <see cref="T:System.Threading.CancellationTokenSource"/> after the specified duration.</summary>
            <param name="source">The CancellationTokenSource.</param>
            <param name="dueTime">The due time for the source to be canceled.</param>
        </member>
        <member name="M:AsyncCtpThreadingExtensions.InvokeAsync(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>Asynchronously invokes an Action on the Dispatcher.</summary>
            <param name="dispatcher">The Dispatcher.</param>
            <param name="action">The action to invoke.</param>
            <returns>A Task that represents the execution of the action.</returns>
        </member>
        <member name="M:AsyncCtpThreadingExtensions.InvokeAsync``1(System.Windows.Threading.Dispatcher,System.Func{``0})">
            <summary>Asynchronously invokes an Action on the Dispatcher.</summary>
            <param name="dispatcher">The Dispatcher.</param>
            <param name="function">The function to invoke.</param>
            <returns>A Task that represents the execution of the function.</returns>
        </member>
    </members>
</doc>

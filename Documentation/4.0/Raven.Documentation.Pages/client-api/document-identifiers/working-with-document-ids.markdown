# Working with document identifiers

Each document in RavenDB database has a unique string associated with this document, called an identifier or a key. Every entity that you store either by using [a session](../session/what-is-a-session-and-how-does-it-work)
or with a [put doucment command](../commands/documents/put) will have such identity assigned in the database. In RavenDB there are [four options](../../server/kb/document-key-generation) supported by the server to store a document and assign an identifier to it.
The client can directly take advantage of them. You always can handling the key generation using the knowledge of the type of the entity and the identity number provided by the HiLo algorithm. This is how the identifier is generated by the session, which is described in details below.

## Session usage

If you choose to use the session, you don't have to pay any special attention to the identifiers of the stored entities. The session will take care of it by generating the keys automatically.
It utilizes [conventions](../../client-api/configuration/conventions/what-are-conventions) and HiLo algorithm to produce the identifiers. Everything is handled by the session's mechanism and is transparent for the user. 
However, you can influence the key generation strategy by overwriting [the key generation conventions](../../client-api/configuration/conventions/identifier-generation/global). In this article we are going to consider the behavior 
in accordance with the default conventions.

{INFO:Identifiers in RavenDB are strings}
Identifiers of documents in RavenDB database are always strings. RavenDB is designed to work with string identifiers and that is the best option you should choose
when you model your entities.
{INFO/}


### Autogenerated ids

In order to figure out which property (or field) holds the entity's identifier, the convention `Conventions.FindIdentityProperty` is called. 
By default, it looks for the property or the field named `Id` (case sensitive). However this property can have `null` value or even not be present at all. Then the automatic key
generation strategy is performed. The default convention is that such entities get the keys in the following format `collection/number`. RavenDB client first determines
the name of [the collection](../../client-api/faq/what-is-a-collection) that the entity belongs to, and then contacts with the server in order to retrieve a numeric range of values, which can be used as the `number` part.
The range of available numbers is calculated by using `HiLo` algorithm and it is tracked per collection. The current maximum value in ranges are stored in documents `Raven/Hilo/collectionName`.

Let's see the example.

{CODE session_id_not_provided@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

What will be the identifier of this order? You can check it by calling:

{CODE session_get_document_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

If this is the first `Order` entity in your database, then it will return `orders/1-A`. How does the key generation process proceed? The RavenDB client determines the collection name as `orders` (by default it is the plural form of the entity name).
Then it asks the server for the server to give him the id's range he can use (the first available range is 1 - 32), the server will handle the Raven/Hilo/orders document. 
The next available identity value (always incrementing number) from the given range is `1` so its combination with the collection name and the node Id gives the result `orders/1-A`.

The next attempt to store another `Order` object within the same session will result in creating the `orders/2-A` key. However, this time asking the server about the possible range
will not be necessary because the in-memory range (1 - 32) is enough, so simply the next number will be added as the key suffix.

{INFO:Identity value numeric range generation}
Each (in code) document store _instance_ handles the generation of the identity value numeric range. The database stores the last requested number while the document store
_instances_ request ranges and caches the returned range of available identities.

The database has a single document (per collection) which stores the last identity value requested by a document store instance.
Eg. the document `Raven/HiLo/accounts` has the following value `
{ 
    "Max": "4000",
    "@metadata": {
        "@collection": "@hilo"
    } 
}`, then the next range will be `4001 - 4032`, if 32 was range size. 
(By default, it's 32).

The number of sessions per document store instance play no part in identity value generation. When the session is close the client send to the server the max value that he use,
than the server will write it in the hilo document (If the Max number is bigger then the number from the client)
{INFO/}

If your intention is to skip the key creation strategy that relays on the collection and HiLo value pair, then you can allow the RavenDB database to assign the Guid identifier
to the stored document. Then you have to provide the `string.Empty` as the value of the `Id` property:

{CODE session_empty_string_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

Note that this time the check for the document id is called after `SaveChanges` because only then we go to the server while the entity's key are generated there.

### Custom/semantic ids

The session also supports the option to store the entity and explicitly tell under what identifier it should be stored in the database. To to this you can either set the `Id` property of the object:

{CODE session_semantic_id_1@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

or use the following `Store` method overload:

{CODE session_semantic_id_2@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

### Identity ids

RavenDB also supports the notion of the identity without the usage of the HiLo. By creating a string Id property in your entity and setting it
to a value ending with a slash (`/`) and with a pipe (`|`), you can tell RavenDB to use that as a key prefix for your entity. That prefix followed by the next available integer identity value will 
be your entity's key after calling `SaveChanges`. The identity value will be assigned by the server.

{CODE session_identity_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

After execution of the above example, the first entity will get `companies/000000000000000001-A` key and the second one `companies/000000000000000002-A`. The identity values are stored per prefix. 
Here, according to the default conventions, we used the collection name as the prefix. Note that we got the different results as we would if we used the the HiLo to auto-generate keys. if we want to get the same
result as in hilo we need to use the pipe symbol option. When you save a document whose ID ends with a pipe symbol, RavenDB will generate the ID for you. It will replace the pipe character with a slash (/) and
append a numeric value (the only guarantee you have about this value is that it's always increasing) and the node ID, the first entity will get `companies/1-A` key and the second one `companies/2-A`.

{CODE session_pipeline_id@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

{INFO:Prefix convention}
Note that we used `companies/` as the prefix just to follow the RavenDB convention. However nothing stands in the way to provide the different prefix, 
which will be completely unrelated to the collection name.
{INFO/}

{INFO:Concurrent writes}
The identities are generated and updated on the server side in the atomic fashion. This means you can safely use this approach in the concurrent writes scenario.
{INFO/}

{WARNING:Mixing key generation approaches}
You should never mix the identity key generation strategy with the auto-generated identifiers based on the HiLo algorithm within the same session. You might run into concurrency issues.

On the other hand, you are allowed to mix the manually assigned keys and the identity ids that starts with `/` or with `|`. RavenDB is aware of the existing document keys, so in an example,
if you save the entity with `companies/1-A` ID and then the another one by specifying `companies/` as the key, RavenDB will set the first free identity values for a given prefix,
so in this case the second one will be stored under `companies/0000000000000000002-A` key using slash (`/`) option with pipe symbol (`|`) is allowed.

{WARNING/}

## Commands usage

The use of the commands API gives you the full freedom to select the key generation strategy. As in the case of session, you can either ask the server to provide the key, or provide the identifier of the stored entity manually.

### Identity ids

As in the case of session, you can indicate if the identifier that you are passing needs to have the identity suffix added. You have to mark it by ending the key by `/` or '|' character:

{CODE commands_identity@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

Using the commands you can manage to build identity keys on the client, but still relaying on the server side identity generator. Simply point out for which prefix
you want to fetch the next available identity number. Look at the example:

{CODE commands_identity_generate@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}

Note that such construction requires going to the server twice in order to add a single document. The call of `session.Advanced.RequestExecutor.Execute(command, session.Advanced.Context)` is necessary for every
entity you want to store. Asking the server about the next identity results in increasing this value on the server side. You cannot simply get the next available identity and 
use it to create the identifiers for the whole collection of the same type objects by locally incrementing this value because you can accidentally overwrite the document or get a
conflict exception if someone else is putting documents using the identity mechanism.

There are dedicated command that allows you to set identity values for a single given prefix:

{CODE commands_identity_set@ClientApi\DocumentIdentifiers\WorkingWithDocumentIds.cs /}
